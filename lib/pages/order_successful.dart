import 'dart:async';
import 'dart:convert';

import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutterdemo02/models/BigText.dart';
import 'package:flutterdemo02/models/ColorSettings.dart';
import 'package:flutterdemo02/models/MiddleText.dart';
import 'package:flutterdemo02/pages/Tabs.dart';
import 'package:flutterdemo02/provider/Shared_Preference.dart';
import 'package:flutterdemo02/API/shopCarApi.dart';
import '../API/historyModel.dart';
import '../API/shopCarModel.dart';
import 'package:flutterdemo02/API/getTokenApi.dart';
import '../models/BetweenSM.dart';
import 'package:http/http.dart' as http;

class orderSuccessful extends StatefulWidget {
  orderSuccessful({Key? key}) : super(key: key);

  @override
  State<orderSuccessful> createState() => _orderSuccessfulState();
}

class _orderSuccessfulState extends State<orderSuccessful> {
  late Future<Result?>? order;

  void inspect() async {
    var ss = await spectator();
    if (ss == null) {
      String? refresh_token = UserSimplePreferences.getRefreshToken();
      var getToken = await getTokenApi.getToken(refresh_token);
      await UserSimplePreferences.setToken(getToken.headers['token']!);
      order = shopCarApi.getCar(UserSimplePreferences.getToken());
    }
    inspect2();
  }

  Future spectator() async {
    order = shopCarApi.getCar(UserSimplePreferences.getToken());
    return await order;
  }

  @override
  void initState() {
    inspect();

    // TODO: implement initState
    super.initState();
  }

  ////申請店家回應
  bool isLoading = false;
  bool deal = false;
  List<Result2?>? accept;
  Timer? timer;
  static const maxSeconds = 60;
  int seconds = maxSeconds;
  void inspect2() async {
    accept = await historyApi(UserSimplePreferences.getToken());
    if (accept == null) {
      String? refresh_token = await UserSimplePreferences.getRefreshToken();
      var getToken = await getTokenApi.getToken(refresh_token);
      await UserSimplePreferences.setToken(getToken.headers['token']!);
      accept = await historyApi(UserSimplePreferences.getToken());
    }
    if (accept!.last!.accept == true && accept!.last!.complete == false) {
      deal = true;
    } else if (accept!.last!.accept == false &&
        accept!.last!.complete == true) {
      deal = false;
    } else {
      accept = null;
    }
    setState(() {
      if (accept == null) {
        inspect2();
      }

      print('accept is $accept');
    });
  }

  historyApi(key) async {
    var response = await http.get(
        Uri.parse(
            'https://hello-cycu-delivery-service.herokuapp.com/member/user/order'),
        headers: {
          "token": '$key',
          "Content-Type": "application/x-www-form-urlencoded"
        });

    if (response.statusCode == 200) {
      debugPrint('status${response.statusCode}');
      debugPrint('responsebody${response.body}');
      var obj = Autogenerated2.fromJson(jsonDecode(response.body));
      print('object1');
      var myaddress = (obj.result as List<Result2?>);
      print('object2');
      return myaddress;
    } else if (response.statusCode == 403) {
      debugPrint('status${response.statusCode}');
      return null;
    } else {
      throw Exception('Failed to load store');
    }
  }

  void startTimer() {
    timer = Timer.periodic(Duration(seconds: 1), (_) {
      if (seconds == 0) {
        seconds = maxSeconds;
      } else {
        seconds--;
      }
      print(seconds);
    });
  }

  ////////////

  @override
  Widget build(BuildContext context) {
    return AnnotatedRegion(
      value: const SystemUiOverlayStyle(
        statusBarBrightness: Brightness.dark, //ios icon white
        statusBarIconBrightness: Brightness.light, //android icon white
        // statusBarColor: Colors.red  //android backgroungColor
      ),
      child: Scaffold(
        body: Container(
          color: kMaim3Color,
          child: SafeArea(
            child: Scaffold(
              body: Container(
                color: Colors.white,
                child: Stack(
                  children: [
                    accept == null
                        ? Center(child: CircularProgressIndicator())
                        : Padding(
                            padding: EdgeInsets.symmetric(
                              vertical: Dimensions.height15 * 2,
                              horizontal: Dimensions.width10 * 2,
                            ),
                            child: Stack(
                              children: [
                                Row(
                                  children: [
                                    deal == true
                                        ? BigText(
                                            color: kTextLightColor,
                                            text: '老闆接單囉~',
                                            fontFamily: 'NotoSansBold',
                                          )
                                        : BigText(
                                            color: kTextLightColor,
                                            text: '訂單失敗囉~',
                                            fontFamily: 'NotoSansBold',
                                          )
                                  ],
                                ),
                                Center(
                                  child: Container(
                                    color: Colors.white,
                                    child: Image.asset(
                                      'images/foodone_logo_pink_1000.jpg',
                                    ),
                                  ),
                                ),
                                Column(
                                  mainAxisAlignment: MainAxisAlignment.end,
                                  children: [
                                    Center(
                                      child: Card(
                                        borderOnForeground: false,
                                        color: Colors.grey,
                                        child: TextButton(
                                          onPressed: () async {
                                            cartController.deleteAll();
                                            await Navigator
                                                .pushReplacementNamed(
                                                    context, '/form3');
                                          },
                                          child: const Text(
                                            '返回首頁',
                                            style: TextStyle(
                                              color: Colors.white,
                                            ),
                                          ),
                                        ),
                                      ),
                                    ),
                                  ],
                                ),
                              ],
                            ),
                          ),
                  ],
                ),
              ),
            ),
          ),
        ),
      ),
    );
  }
}
