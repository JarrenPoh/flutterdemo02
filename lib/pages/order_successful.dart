import 'dart:async';
import 'dart:convert';

import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutterdemo02/models/BigText.dart';
import 'package:flutterdemo02/models/ColorSettings.dart';
import 'package:flutterdemo02/models/MiddleText.dart';
import 'package:flutterdemo02/models/TabsText.dart';
import 'package:flutterdemo02/pages/Tabs.dart';
import 'package:flutterdemo02/provider/Shared_Preference.dart';
import 'package:flutterdemo02/API/shopCarApi.dart';
import 'package:get/get.dart';
import 'package:get/get_core/src/get_main.dart';
import '../API/historyModel.dart';
import '../API/shopCarModel.dart';
import 'package:flutterdemo02/API/getTokenApi.dart';
import '../models/BetweenSM.dart';
import 'package:http/http.dart' as http;

class orderSuccessful extends StatefulWidget {
  orderSuccessful({Key? key}) : super(key: key);

  @override
  State<orderSuccessful> createState() => _orderSuccessfulState();
}

class _orderSuccessfulState extends State<orderSuccessful> {
  late Future<Result?>? order;

  void inspect() async {
    var ss = await spectator();
    if (ss == null) {
      String? refresh_token = UserSimplePreferences.getRefreshToken();
      var getToken = await getTokenApi.getToken(refresh_token);
      await UserSimplePreferences.setToken(getToken.headers['token']!);
      order = shopCarApi.getCar(UserSimplePreferences.getToken());
    }
    inspect2();
  }

  Future spectator() async {
    order = shopCarApi.getCar(UserSimplePreferences.getToken());
    return await order;
  }

  @override
  void initState() {
    inspect();

    // TODO: implement initState
    super.initState();
  }

  ////申請店家回應
  bool isLoading = false;
  bool deal = false;
  List<Result2?>? accept;
  Timer? timer;
  static const maxSeconds = 60;
  int seconds = maxSeconds;
  String SId = '';
  void inspect2() async {
    accept = await historyApi(UserSimplePreferences.getToken());
    if (accept == null) {
      String? refresh_token = await UserSimplePreferences.getRefreshToken();
      var getToken = await getTokenApi.getToken(refresh_token);
      await UserSimplePreferences.setToken(getToken.headers['token']!);
      accept = await historyApi(UserSimplePreferences.getToken());
    }
//
    if (accept!.last!.accept == true && accept!.last!.complete == false) {
      deal = true;
    } else if (accept!.last!.accept == false &&
        accept!.last!.complete == true) {
      deal = false;
    } else {
      accept = null;
    }

    

    setState(() {
      if (accept == null) {
        inspect2();
      }

      print('accept is $accept');
    });
  }

  historyApi(key) async {
    var response = await http.get(
        Uri.parse(
            'https://hello-cycu-delivery-service.herokuapp.com/member/user/order'),
        headers: {
          "token": '$key',
          "Content-Type": "application/x-www-form-urlencoded"
        });

    if (response.statusCode == 200) {
      debugPrint('status${response.statusCode}');
      debugPrint('responsebody${response.body}');
      var obj = Autogenerated2.fromJson(jsonDecode(response.body));
      
      var myaddress = (obj.result as List<Result2?>);
      SId = myaddress.last!.sId!;
      print('SId is ${SId}');
      return myaddress;
    } else if (response.statusCode == 403) {
      debugPrint('status${response.statusCode}');
      return null;
    } else {
      throw Exception('Failed to load store');
    }
  }

  void startTimer() {
    timer = Timer.periodic(Duration(seconds: 1), (_) {
      if (seconds == 0) {
        seconds = maxSeconds;
      } else {
        seconds--;
      }
      print(seconds);
    });
  }

  ////////////
  bool delete = false;
  Future inspect3() async {
    var ss = await deleteOrder(UserSimplePreferences.getToken());
    if (ss == null) {
      String? refresh_token = UserSimplePreferences.getRefreshToken();
      var getToken = await getTokenApi.getToken(refresh_token);
      await UserSimplePreferences.setToken(getToken.headers['token']!);
      ss = await deleteOrder(UserSimplePreferences.getToken());
    }
    print('ss is $ss');
    if (ss['status'] == '訂單已成功撤回') {
      var Text = ss['result'];
      var Status = ss['status'];
      setState(() {
        delete = true;
        Get.snackbar(
          "$Status",
          "$Text",
          snackPosition: SnackPosition.BOTTOM,
          duration: const Duration(seconds: 4),
        );
      });
    } else {
      setState(() {
        var Text = ss['result'];
        var Status = ss['status'];
        Get.snackbar(
          "$Status",
          "$Text",
          snackPosition: SnackPosition.BOTTOM,
          duration: const Duration(seconds: 4),
        );
      });
    }
  }

  deleteOrder(key) async {
    var response = await http.delete(
      Uri.parse(
          'https://hello-cycu-delivery-service.herokuapp.com/member/user/order'),
      headers: {
        "token": key,
        "id":SId,
        "Content-Type": "application/x-www-form-urlencoded",
      },
      
    );

    debugPrint(
        'response statusCode in order_successful.dart is ${response.statusCode}');
    var obj = (jsonDecode(response.body));

    debugPrint('obj is ${obj}');

    if (response.statusCode == 200) {
      return obj;
    } else if (response.statusCode == 403) {
      return null;
    } else {
      return obj;
    }
  }

  @override
  Widget build(BuildContext context) {
    return AnnotatedRegion(
      value: const SystemUiOverlayStyle(
        statusBarBrightness: Brightness.dark, //ios icon white
        statusBarIconBrightness: Brightness.light, //android icon white
        // statusBarColor: Colors.red  //android backgroungColor
      ),
      child: Scaffold(
        body: Container(
          color: kMaim3Color,
          child: SafeArea(
            child: Scaffold(
              backgroundColor: Colors.white,
              body: Stack(
                children: [
                  accept == null
                      ? delete == false
                          ? Stack(
                              alignment: Alignment.center,
                              children: [
                                Center(child: CircularProgressIndicator()),
                                Positioned(
                                  top: Dimensions.height50,
                                  left: Dimensions.width20,
                                  child: BetweenSM(
                                    color: kBodyTextColor,
                                    text: '正在等待店家回應..',
                                    fontFamily: 'NotoSansBold',
                                  ),
                                ),
                                Positioned(
                                  bottom: Dimensions.height50,
                                  child: Column(
                                    children: [
                                      Row(
                                        children: [
                                          BetweenSM(
                                            color: kTextLightColor,
                                            text: '不想吃了?我想撤單  ->',
                                            fontFamily: 'NotoSansMedium',
                                          ),
                                          SizedBox(
                                            width: Dimensions.width10,
                                          ),
                                          ElevatedButton(
                                            onPressed: () async {
                                              await inspect3();
                                            },
                                            style: ElevatedButton.styleFrom(
                                                primary: kMaim3Color),
                                            child: TabText(
                                              text: '撤單',
                                              color: Colors.white,
                                              fontFamily: 'NotoSansMedium',
                                            ),
                                          ),
                                        ],
                                      ),
                                    ],
                                  ),
                                )
                              ],
                            )
                          : Padding(
                              padding: EdgeInsets.symmetric(
                                vertical: Dimensions.height15 * 2,
                                horizontal: Dimensions.width10 * 2,
                              ),
                              child: Stack(
                                children: [
                                  Row(
                                    children: [
                                      BigText(
                                        color: kTextLightColor,
                                        text: '成功撤回訂單囉~',
                                        fontFamily: 'NotoSansBold',
                                      ),
                                    ],
                                  ),
                                  Center(
                                    child: Container(
                                      color: Colors.white,
                                      child: Image.asset(
                                        'images/foodone_logo_pink_1000.jpg',
                                      ),
                                    ),
                                  ),
                                  Column(
                                    mainAxisAlignment: MainAxisAlignment.end,
                                    children: [
                                      Center(
                                        child: Card(
                                          borderOnForeground: false,
                                          color: Colors.grey,
                                          child: TextButton(
                                            onPressed: () async {
                                              cartController.deleteAll();
                                              await Navigator
                                                  .pushReplacementNamed(
                                                      context, '/form3');
                                            },
                                            child: const Text(
                                              '返回首頁',
                                              style: TextStyle(
                                                color: Colors.white,
                                              ),
                                            ),
                                          ),
                                        ),
                                      ),
                                    ],
                                  ),
                                ],
                              ),
                            )
                      : Padding(
                          padding: EdgeInsets.symmetric(
                            vertical: Dimensions.height15 * 2,
                            horizontal: Dimensions.width10 * 2,
                          ),
                          child: Stack(
                            children: [
                              Row(
                                children: [
                                  deal == true
                                      ? BigText(
                                          color: kTextLightColor,
                                          text: '老闆接單囉~',
                                          fontFamily: 'NotoSansBold',
                                        )
                                      : BigText(
                                          color: kTextLightColor,
                                          text: '訂單失敗囉~',
                                          fontFamily: 'NotoSansBold',
                                        )
                                ],
                              ),
                              Center(
                                child: Container(
                                  color: Colors.white,
                                  child: Image.asset(
                                    'images/foodone_logo_pink_1000.jpg',
                                  ),
                                ),
                              ),
                              Column(
                                mainAxisAlignment: MainAxisAlignment.end,
                                children: [
                                  Center(
                                    child: Card(
                                      borderOnForeground: false,
                                      color: Colors.grey,
                                      child: TextButton(
                                        onPressed: () async {
                                          cartController.deleteAll();
                                          await Navigator.pushReplacementNamed(
                                              context, '/form3');
                                        },
                                        child: const Text(
                                          '返回首頁',
                                          style: TextStyle(
                                            color: Colors.white,
                                          ),
                                        ),
                                      ),
                                    ),
                                  ),
                                ],
                              ),
                            ],
                          ),
                        ),
                ],
              ),
            ),
          ),
        ),
      ),
    );
  }
}
